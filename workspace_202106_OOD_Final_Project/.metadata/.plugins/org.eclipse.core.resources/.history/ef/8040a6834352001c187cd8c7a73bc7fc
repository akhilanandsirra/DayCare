package edu.neu.csye6200;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Collections;
import java.util.Comparator;
import java.util.Vector;

public class ClassRoom {
private int capacity;
private Vector<Person> teacherRoster; 
private Vector<Person> studentRoster;
public int getCapacity() {
	return capacity;
}

public void setCapacity(int capacity) {
	this.capacity = capacity;
}
public Vector<Person> getTeacher() {
	return teacherRoster;
}
public void setTeacher(Vector<Person> teacher) {
	this.teacherRoster = teacher;
}
public Vector<Person> getStudent() {
	return teacherRoster;
}
public void setStudent(Vector<Person> student) {
	this.teacherRoster = student;
}
public ClassRoom(int capacity, Vector<Teacher> teacher, Vector<Student> student) {
	super();
	this.capacity = capacity;
	teacher = new Vector<Teacher>();
	student = new Vector<Student>();
	
}

public void addStudent(Student std) {
	studentRoster.add(std);
}

public void addTeacher(Teacher tea) {
	teacherRoster.add(tea);
}

@Override
public String toString() {
	return "ClassRoom [capacity=" + capacity + ", teacher=" + teacherRoster + ", student=" + studentRoster + "]";
}
public ClassRoom() {
	// default constructor
}

public static void demo() {
	ClassRoom ClassRoom = new ClassRoom();
	String line = "";  
	String splitBy = ",";  
	String filename = "./src/edu/neu/csye6200/students.txt";
	//Create a Student Comma Separated Value (CSV) text file (students.txt) file,
	//where each line will contain data for instantiating a single Student object.
	try (BufferedReader bufferReader = FileUtil.openBufferedReader(FileUtil.openFileReader(filename))){
		
		while ((line = FileUtil.readBufferedReader(bufferReader)) != null)   //returns a Boolean value  
		{  
			String[] person = line.split(splitBy);    // use comma as separator
			//System.out.println(person[8]);
			if (person[6] != "") {
				// It is Student
				System.out.println("student [ID " + person[0] + ", First Name =  " + person[1] + ", Last Name = " + person[2] + 
						", Age =" + person[3] + ", Parent First Name= " + 
						person[4] + ", Parent Last name " + person[5] +" Student ID "+person[6]+" GPA "+person[7]+"]");
				Student student = Student.createStudentFromCSV(line);   // To Create Student object From CSV file
				// Add student object to a list, so that we can store and sort or perform any operations on that data
				school.addingtoList(student);
				

			}  
			else {
				System.out.println();
				System.out.println("Teacher [ID " + person[0] + ", First Name =  " + person[2] + ", Last Name = " + person[3] + 
						", Age =" + person[1] + ", Parent First Name= " + 
						person[4] + ", Parent Last name " + person[5] +" Hourly wage "+person[8]+"]");  
				// Create Teacher object - we Need not Create only from CSV file, 
				//and we can also parse data to the object as follows
				Teacher teacher = new Teacher(Integer.parseInt(person[0]), Integer.parseInt(person[1]), person[2], 
						                         person[3], person[4], person[5], Double.parseDouble(person[8]));
				// Add Teacher object to a list, so that we can store and sort or perform any operations on that data
				school.addingtoList(teacher);
			}  
		}
	} catch (FileNotFoundException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	} catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	try (BufferedWriter bufferWriter = FileUtil.openBufferedWriter(FileUtil.openFileWriter("./src/edu/neu/csye6200/csv1.txt"))){
		for (Student student : school.studentRoster) {
			FileUtil.writeBufferedWriter(bufferWriter, student.toString());
			
		}
		// To demonstrate to write back to the file only student data and not teacher data
		// We can parse all the objects from any class and write back to the file
		bufferWriter.flush();
		// Once the program ends, bufferWriter flushes any data present to the file specified
		// By doing this explicitly, we have the option to flush the data at our ease
	} catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
		

	// Class sortByFistName to sort based on first name which implements Comparator

	class sortByFirstName implements Comparator<Person> {

		@Override
		public int compare(Person s1, Person s2) {
			return s1.getFirst_name().compareTo(s2.getFirst_name());
		}

	}
	// Class sortByLast Name to sort based on Last name which implements Comparator
	class sortByLastName implements Comparator<Person> {

		@Override
		public int compare(Person s1, Person s2) {
			return s1.getFirst_name().compareTo(s2.getFirst_name());
		}

	}

	// Class sortByAge to sort based on age which implements Comparator
	class sortByAge implements Comparator<Person> {

		@Override
		public int compare(Person s1, Person s2) {
			return s1.getAge() - s2.getAge();
		}

	}
	// Class sortByID to sort based on ID which implements Comparator
	class sortById implements Comparator<Student> {

		@Override
		public int compare(Student s1, Student s2) {
			return s1.getID() - s2.getID();
		}

	}
	// Class sortByGPA to sort based on GPA which implements Comparator
	class sortByGpa implements Comparator<Student> {

		@Override
		public int compare(Student s1, Student s2) {
			return (int) (s1.getGpa() - s2.getGpa());
		}

	}
	class sortByStudentID implements Comparator<Student> {

		@Override
		public int compare(Student s1, Student s2) {
			return (int) (s1.getStudentID() - s2.getStudentID());
		}

	}


	System.out.println();
	System.out.println("Sorting the Students with Comparator methods");
	System.out.println();
	System.out.println("Students before Sorting");
	print(school.studentRoster);


	sortByGpa sortbygpa = new sortByGpa();
	sortById sortbyid = new sortById();
	sortByStudentID sortbyStudentID = new sortByStudentID();
	sortByAge sortbyage = new sortByAge();
	sortByFirstName sortbyfirstname = new sortByFirstName();
	sortByLastName sortbylastname = new sortByLastName();


	System.out.println("comparing by age");
	Collections.sort(school.studentRoster, sortbyage);
	print(school.studentRoster);

	System.out.println("comparing the students by FirstName");
	Collections.sort(school.studentRoster, sortbyfirstname);
	print(school.studentRoster);

	System.out.println("comparing the students by LastName");
	Collections.sort(school.studentRoster, sortbylastname);
	print(school.studentRoster);

	System.out.println("comparing the students by gpa");
	Collections.sort(school.studentRoster, sortbygpa);
	print(school.studentRoster);

	System.out.println("comparing the students by id (not StudentID)");
	Collections.sort(school.studentRoster, sortbyid);
	print(school.studentRoster);

	System.out.println("comparing the students by StudentID");
	Collections.sort(school.studentRoster, sortbyStudentID );
	print(school.studentRoster);




}


}
